set nocompatible        " must be first line
" Modeline and Notes {

    scriptencoding utf-8

" Environment {
    " Basics {
        set background=dark     " Assume a dark background
    " }

    " Windows Compatible {
        " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
        " across (heterogeneous) systems easier.
        if has('win32') || has('win64')
            set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
            let g:is_win = 1
        else
            " use bash as the default shell for vim
            " @see http://dailyvim.tumblr.com/post/66708941289/fish
            set shell=/bin/bash
            let g:is_win = 0
        endif
    " }
    "
" }

" Plug config {
    " use https://superuser.com/questions/1692635/git-clone-using-https-is-not-working-but-works-with-help-of-ssh
" }

" Bundles {

    call plug#begin('~/.vim/bundle')

    " Deps
        Plug 'MarcWeber/vim-addon-mw-utils'
        Plug 'tomtom/tlib_vim'

    " Use local bundles if available {
        if filereadable(expand('~/.vimrc.bundles.local'))
            source ~/.vimrc.bundles.local
        endif
    " }
    " Use fork bundles if available {
        if filereadable(expand('~/.vimrc.bundles.fork'))
            source ~/.vimrc.bundles.fork
        endif
    " }
    "




    " In your .vimrc.bundles.local file"
    " list only the plugin groups you will use
    if !exists('g:spf13_bundle_groups')
            "\ 'twig',
            "\ 'scala',
            "\ 'java',
            "\ 'coffeescript',
            "\ 'ctags',
            "\ 'ios',
            " \ 'haskell',
            " \ 'fzf',  " conflict with windows + gvim + git-bash, search windows has some questions
        let g:spf13_bundle_groups=[
            \ 'general',
            \ 'colors',
            \ 'programming',
            \ 'snip',
            \ 'javascript',
            \ 'java',
            \ 'node',
            \ 'vue',
            \ 'react',
            \ 'typescript',
            \ 'css',
            \ 'html',
            \ 'document',
            \ 'haskell',
            \ 'ruby',
            \ 'python',
            \ 'php',
            \ 'ai',
            \ 'bash'
            \ ]
        if g:is_win == 0
            call add(g:spf13_bundle_groups, 'fzf')
        endif
    endif

    " 可选的值:
    "  ycm (YouCompleteMe)
    "  vim-lsp (vim-lsp + asyncomplete)
    "  tabnine
    "  deoplete
    "  coc
    "
    let g:spf13_autocomplete_method=['ycm']

    " To override all the included bundles, put
    " g:override_spf13_bundles = 1
    " in your .vimrc.bundles.local file"
    if !exists('g:override_spf13_bundles')

    " General
        if count(g:spf13_bundle_groups, 'general')
            " Plug 'mhinz/vim-startify'
            Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }
            Plug 'vim-scripts/matchit.zip'
            Plug 'ntpeters/vim-better-whitespace'
            Plug 'FuDesign2008/TrimWhiteSpaces.vim'
            " Plug 'junegunn/rainbow_parentheses.vim'

            " Do NOT use, for `:ALEFix` will be run before save
            " Plug '907th/vim-auto-save'
            " disable :ALEFix when auto-save
            " vim-auto-save will breaking undo
            " Plug 'FuDesign2008/vim-auto-save'

            " Plug 'haya14busa/incsearch.vim'
            " Plug 'haya14busa/incsearch-fuzzy.vim'

            " airline is lightweight than powerline
            Plug 'vim-airline/vim-airline'
            Plug 'vim-airline/vim-airline-themes'
            " Plug 'itchyny/lightline.vim'

            " Plug 'vim-scripts/LanguageTool'

            "Plug 'Lokaltog/vim-easymotion'
            "NOTE: csapprox cause errors
            "Plug 'godlygeek/csapprox'
            "Plug 'jistr/vim-nerdtree-tabs'
            "Plug 'mbbill/undotree'
            "if !exists('g:spf13_no_views')
                "Plug 'vim-scripts/restore_view.vim'
            "endif
            "Plug 'tpope/vim-abolish.git'

            "Provides tab completion while inside the “/” search
            " useless!!! not able for search and repalce
            "Plug 'vim-scripts/SearchComplete'

            " to zoomin/out/reset guifont size
            " Plug 'FuDesign2008/zoom.vim'
            "Plug 'vim-scripts/ZoomWin'

            " Plug 'FuDesign2008/WebSearch.vim'

            " 1. http://aftnn.org/post/75730734352/vim-auto-closers-compared
            " 2. https://github.com/kana/vim-smartinput/issues/65
            "Plug 'kana/vim-smartinput'
            " use delimitMate instead vim-closetag
            " for vim-closetag conflicts with YCM
            " Plug 'alvan/vim-closetag'
            Plug 'Raimondi/delimitMate'

            Plug 'FuDesign2008/OpenUrl.vim'
            " Plug 'tyru/open-browser.vim'

            " Plug 'FuDesign2008/ToggleNumber.vim'
            Plug 'myusuf3/numbers.vim'
            " Plug 'FuDesign2008/style.vim'
            " Plug 'FuDesign2008/emoji-snippets.vim'

            " Plug 'vim-scripts/IndentAnything'
            "Plug 'Yggdroot/indentLine'
            "Plug 'nathanaelkane/vim-indent-guides'

            " how to use
            " @see https://yanpritzker.com/learn-to-speak-vim-verbs-nouns-and-modifiers-d7bfed1f6b2d
            Plug 'tpope/vim-surround'

            "Plug 'terryma/vim-multiple-cursors'


            if count(g:spf13_autocomplete_method,'tabnine')
                Plug 'codota/tabnine-vim'
            endif

            if count(g:spf13_autocomplete_method, 'deoplete')
                Plug 'Shougo/deoplete.nvim'
                Plug 'roxma/nvim-yarp'
                Plug 'roxma/vim-hug-neovim-rpc'


                " misc
                Plug 'fszymanski/deoplete-emoji'
                Plug 'thalesmello/webcomplete.vim'

                " common
                Plug 'Shougo/neco-syntax'
                " javascript
                Plug 'carlitux/deoplete-ternjs'
                " jedi source for Python
                Plug 'deoplete-plugins/deoplete-jedi'
                " typescript
                " Plug 'mhartington/nvim-typescript', {'do': './install.sh'}
                " viml
                Plug 'Shougo/neco-vim'
                " zsh
                Plug 'deoplete-plugins/deoplete-zsh'
                " shell terminal in vim
                Plug 'Shougo/deol.nvim'
                " asm
                Plug 'deoplete-plugins/deoplete-asm'

                " echo document
                Plug 'Shougo/echodoc.vim'

            endif

            if count(g:spf13_autocomplete_method, 'vim-lsp')
                Plug 'prabirshrestha/async.vim'
                " Plug 'prabirshrestha/vim-lsp'
                Plug 'FuDesign2008/vim-lsp'
                Plug 'mattn/vim-lsp-settings'

                " UltiSnips
                Plug 'thomasfaingnaert/vim-lsp-snippets'
                Plug 'thomasfaingnaert/vim-lsp-ultisnips'

                " Plug 'prabirshrestha/asyncomplete.vim'
                " @see https://github.com/prabirshrestha/asyncomplete.vim/pull/280
                Plug 'FuDesign2008/asyncomplete.vim'
                Plug 'FuDesign2008/asyncomplete-smart-fuzzy.vim'

                " Plug 'machakann/asyncomplete-ezfilter.vim'

                Plug 'prabirshrestha/asyncomplete-lsp.vim'

                Plug 'prabirshrestha/asyncomplete-ultisnips.vim'
                Plug 'prabirshrestha/asyncomplete-file.vim'
                Plug 'prabirshrestha/asyncomplete-buffer.vim'
                " Plug 'hiterm/asyncomplete-look'
                Plug 'yami-beta/asyncomplete-omni.vim'
                " Plug 'prabirshrestha/asyncomplete-emoji.vim'

            endif

            if count(g:spf13_autocomplete_method, 'coc')
                Plug 'neoclide/coc.nvim', { 'do': 'yarn install --frozen-lockfile && npm run build' }

                " viml
                Plug 'iamcco/coc-vimlsp', { 'do': 'yarn install --frozen-lockfile' }

                "common source
                Plug 'neoclide/coc-sources', { 'do': 'yarn install --frozen-lockfile' }


                Plug 'iamcco/coc-spell-checker'

                Plug 'neoclide/coc-tsserver', { 'do': 'yarn install --frozen-lockfile' }

                Plug 'neoclide/coc-json', { 'do': 'yarn install --frozen-lockfile' }

                Plug 'neoclide/coc-html', { 'do': 'yarn install --frozen-lockfile' }
                Plug 'yaegassy/coc-htmlhint'
                Plug 'yaegassy/coc-html-css-support'
                Plug 'neoclide/coc-css', { 'do': 'yarn install --frozen-lockfile' }
                Plug 'antonk52/coc-cssmodules'
                Plug 'iamcco/coc-svg'

                Plug 'neoclide/coc-vetur', { 'do': 'yarn install --frozen-lockfile' }
                " Plug 'neoclide/coc-python', { 'do': 'yarn install --frozen-lockfile' }
                " Plug 'neoclide/coc-git', { 'do': 'yarn install --frozen-lockfile' }
                Plug 'neoclide/coc-snippets', { 'do': 'yarn install --frozen-lockfile' }

                Plug 'josa42/coc-sh'

                Plug 'fannheyward/coc-xml'
                Plug 'neoclide/coc-yaml'
            endif

            if count(g:spf13_autocomplete_method, 'ycm')
                " YCM is better than NeoComplCache and supertab
                " @see http://valloric.github.io/YouCompleteMe/
                "
                " But YCM does not have good-enough support for obj-c
                " @see https://github.com/Valloric/YouCompleteMe/issues/84
                Plug 'ycm-core/YouCompleteMe', { 'do':
                    \ 'python3 ./install.py --clang-completer --ts-completer  --system-libclang --verbose &&  cd ./third_party/ycmd/third_party/tsserver && yarn add typescript@latest typescript-plugin-css-modules@latest'
                    \ }
                Plug 'ycm-core/lsp-examples', { 'do':
                        \ 'python3 ./install.py --enable-bash --enable-docker --enable-json --enable-viml --enable-vue --enable-yaml'
                    \ }
                " Plug 'FuDesign2008/lsp-examples' , { 'do': 'python3 ./install.py --enable-bash --enable-docker --enable-json --enable-viml --enable-vue --enable-yaml' }
            endif


            if count(g:spf13_bundle_groups, 'fzf')
                Plug 'junegunn/fzf.vim'
            else
                Plug 'ctrlpvim/ctrlp.vim'
            endif

            Plug 'FuDesign2008/plan.vim'

            " ack
            "if executable('ack-grep')
                "let g:ackprg="ack-grep -H --nocolor --nogroup --column"
                "Plug 'mileszs/ack.vim'
            "elseif executable('ack')
                "Plug 'mileszs/ack.vim'
            "endif

            " use the_silver_searcher which if faster
            " instead of ack
            " @see https://github.com/rking/ag.vim/issues/124#issuecomment-227038003
            Plug 'FuDesign2008/ack.vim'

            " conflict with delimitMate
            " Plug 'jiangmiao/auto-pairs'

            " Plug 'FuDesign2008/toggle-maximize.vim'
            Plug 'FuDesign2008/only.vim'
            Plug 'jamessan/vim-gnupg'
            Plug 'AdamWhittingham/vim-copy-filename'
        endif

    "Colors
        if count(g:spf13_bundle_groups, 'colors')
            "lucius in vim-colorschemes is outdate
            " Plug 'flazz/vim-colorschemes'
            Plug 'FuDesign2008/awesome-vim-colorschemes'
            Plug 'FuDesign2008/randomTheme.vim', { 'do': './install_fonts_mac.sh' }
        endif


    " General Programming
        if count(g:spf13_bundle_groups, 'programming')
            Plug 'APZelos/blamer.nvim'
            " Plug 'tpope/vim-fugitive'

            " see http://editorconfig.org/
            Plug 'editorconfig/editorconfig-vim'

            " conflicts with delimitMate
            " @see https://github.com/Raimondi/delimitMate/issues/236
            " Plug 'tpope/vim-endwise'

            " ALE and Syntastic are conflict
            " Plug 'scrooloose/syntastic'
            " Plug 'mtscout6/syntastic-local-eslint.vim'
            " Plug 'dense-analysis/ale'
            Plug 'FuDesign2008/ale'
            Plug 'FuDesign2008/ale-shim.vim'

            "Plug 'mattn/webapi-vim'
            "Plug 'mattn/gist-vim'
            " Plug 'preservim/nerdcommenter'
            Plug 'FuDesign2008/nerdcommenter'
            "Plug 'dimasg/vim-mark'

            "@see http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
            " Plug 'godlygeek/tabular'

            Plug 'FuDesign2008/autoHighlight.vim'
            Plug 'FuDesign2008/smartRename.vim'

            Plug 'will133/vim-dirdiff'
            " Plug 'junkblocker/patchreview-vim'
            Plug 'chrisbra/vim-diff-enhanced'
            " Plug 'Chiel92/vim-autoformat'

            " Plug 'KabbAmine/zeavim.vim'

            Plug 'ekalinin/Dockerfile.vim'
            Plug 'cespare/vim-toml'

            Plug 'ashishbinu/vim-dotenv'

            " Plug 'christoomey/vim-system-copy'


            if !g:is_win

                "dash.vim needs funcoo.vim
                "Plug 'rizzatti/funcoo.vim'
                "Plug 'rizzatti/dash.vim'

            endif

        endif

    " ctags
        if count(g:spf13_bundle_groups, 'ctags') && executable('ctags') && !g:is_win
            Plug 'majutsushi/tagbar'

            Plug 'xolox/vim-misc'
            " Use easytas with YCM for NOT C-family languages like html,
            " css, scss
            Plug 'xolox/vim-easytags'
        endif

    " Snippets
        if count(g:spf13_bundle_groups, 'snip')
            "Plug 'garbas/vim-snipmate'

            if !g:is_win
                " ultisnips is better
                "YCM can integeting with ultisnips
                "snippets engine
                Plug 'SirVer/ultisnips'

                "snippets
                Plug 'honza/vim-snippets'

                Plug 'FuDesign2008/viml-snippets.vim', { 'for': 'vim' }
            endif

        endif

    " PHP
        if count(g:spf13_bundle_groups, 'php')
            " better syntax hilight
            Plug 'shawncplus/php.vim', { 'for': 'php' }
            " Plug 'shawncplus/phpcomplete.vim'
            "Plug 'spf13/PIV'
        endif

    " Python
        if count(g:spf13_bundle_groups, 'python')
            "Plug 'klen/python-mode'

            " YouCompleteMe will use Jedi for python completion

            " syntax checker
            Plug 'nvie/vim-flake8', { 'for': 'python' }
            " document
            Plug 'fs111/pydoc.vim', { 'for': 'python' }
            Plug 'FuDesign2008/python-snippets', { 'for': 'python' }

        endif

    " Javascript
        if count(g:spf13_bundle_groups, 'javascript')
            Plug 'leshill/vim-json'
            Plug 'gutenye/json5.vim'
            Plug 'neoclide/jsonc.vim'
            " Plug 'kevinoid/vim-jsonc'


            Plug 'pangloss/vim-javascript'
            "Plug 'jelera/vim-javascript-syntax'

            " support javascript and typescript
            " @see https://github.com/Galooshi/import-js/issues/503
            Plug 'galooshi/vim-import-js'

            " disable othree/yajs.vim for performance
            " @see https://github.com/othree/yajs.vim#performance-issue
            " > yajs.vim is not good on performance
            " Plug 'othree/es.next.syntax.vim'
            " Plug 'othree/yajs.vim'
            " Plug 'othree/javascript-libraries-syntax.vim'

            "Plug 'mattn/jscomplete-vim'

            Plug 'FuDesign2008/javascript-snippets.vim', { 'for': 'javascript' }

            " Plug 'marijnh/tern_for_vim'

            Plug 'heavenshell/vim-jsdoc', { 'do': 'make clean && make install' }
            " Plug 'FuDesign2008/vim-jsdoc'

            " Plug 'Quramy/vim-js-pretty-template'

            " Plug 'flowtype/vim-flow'

            " for wxapp
            " Plug 'chemzqm/wxapp.vim'

            " Plug 'mxw/vim-jsx'
            " vim-jsx-pretty may be better than vim-jsx
            Plug 'maxmellon/vim-jsx-pretty'

            Plug 'FuDesign2008/component-kit.vim'

            Plug 'maksimr/vim-jsbeautify', { 'do': 'git submodule update --init --recursive' }

            " typescript
            if count(g:spf13_bundle_groups, 'typescript')
                Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
                " had some performance issues when highlighting large TSX files
                " @see https://thoughtbot.com/blog/modern-typescript-and-react-development-in-vim
                " Plug 'peitalin/vim-jsx-typescript'
                Plug 'FuDesign2008/json2ts.vim', {
                            \ 'do': 'npm install',
                            \ 'for': 'typescript'
                            \ }
                " yats has UltiSnips for typescript - which is not wanted
                " Plug 'HerringtonDarkholme/yats.vim'
            endif

            " coffeescript
            if count(g:spf13_bundle_groups, 'coffeescript')
                Plug 'kchmck/vim-coffee-script'
            endif

            if count(g:spf13_bundle_groups, 'react')
                Plug 'FuDesign2008/react-snippets.vim'
            endif

            " vue
            if count(g:spf13_bundle_groups, 'vue')
                Plug 'posva/vim-vue'
                Plug 'FuDesign2008/vue-snippets.vim'
                " Plug 'FuDesign2008/element-ui.vim'
                Plug 'FuDesign2008/element-ui-snippets.vim'
            endif


        endif

    " node

        if count(g:spf13_bundle_groups, 'node')

            " for node
            " Plug 'myhere/vim-nodejs-complete'
            Plug 'guileen/vim-node-dict'
            " Plug 'sidorares/node-vim-debugger'
            Plug 'moll/vim-node'
            " Plug 'digitaltoad/vim-pug'

        endif

    " css
        if count(g:spf13_bundle_groups, 'css')
            " Plug 'hail2u/vim-css3-syntax'
            Plug 'groenewege/vim-less', { 'for': 'less' }
            " Plug 'wavded/vim-stylus'

            Plug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }
            "Plug 'tpope/vim-haml'

            " use ap/vim-css-color instead of skammer/vim-css-color
            " @see https://github.com/jvortmann/vim-files/issues/2
            Plug 'ap/vim-css-color'
            " Plug 'amadeus/vim-convert-color-to'

            Plug 'FuDesign2008/css-snippets.vim'
        endif

    " scala
        if count(g:spf13_bundle_groups, 'scala')
            Plug 'derekwyatt/vim-scala'
            Plug 'derekwyatt/vim-sbt'
        endif

    " HTML
        if count(g:spf13_bundle_groups, 'html')
            " Plug 'amirh/HTML-AutoCloseTag'
            Plug 'othree/html5.vim'
            Plug 'mattn/emmet-vim'
            "Plug 'lepture/vim-velocity'
        endif


    " Ruby
        if count(g:spf13_bundle_groups, 'ruby')
            Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
            Plug 'tpope/vim-rails', { 'for': 'ruby' }
            let g:rubycomplete_buffer_loading = 1
            "let g:rubycomplete_classes_in_global = 1
            "let g:rubycomplete_rails = 1
        endif

    " Document
        if count(g:spf13_bundle_groups, 'document')
            " useful when show code
            Plug 'junegunn/goyo.vim', { 'for': 'markdown' }
            Plug 'FuDesign2008/vim-carbon-now-sh'
            " Plug 'jszakmeister/markdown2ctags'

            Plug 'FuDesign2008/mkdInput.vim', { 'for': 'markdown' }
            Plug 'FuDesign2008/mermaidViewer.vim'
            Plug 'FuDesign2008/MarkdownViewer.vim', {
                    \ 'do': 'npm install',
                    \ 'for': 'markdown'
                    \ }
            Plug 'FuDesign2008/markdown-snippets.vim', { 'for': 'markdown' }

            " Plug 'iamcco/markdown-preview.nvim', {'do': 'cd ./app && yarn install'}
            " Plug 'mzlogin/vim-markdown-toc'
            Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
            Plug 'lervag/vimtex'



            "Plug 'vim-scripts/Figlet.vim'
            "Plug 'vim-scripts/wiki.vim'
            "Plug 'chase/vim-ansible-yaml'
            "Plug 'hotoo/pangu.vim'
            "Plug 'spf13/vim-preview'
            "Plug 'tpope/vim-cucumber'
            "Plug 'quentindecock/vim-cucumber-align-pipes'
            "Plug 'Puppet-Syntax-Highlighting'
        endif

    " Twig
        "if count(g:spf13_bundle_groups, 'twig')
            "Plug 'beyondwords/vim-twig'
        "endif

    "Java
        "
        if count(g:spf13_bundle_groups, 'java') && !g:is_win
            " Plug 'artur-shaik/vim-javacomplete2'
            Plug 'udalov/kotlin-vim'
        endif

    "iOS
        "
        if count(g:spf13_bundle_groups, 'ios') && !g:is_win
            "Plug 'msanders/cocoa.vim'
            Plug 'b4winckler/vim-objc'
            "Plug 'eraserhd/vim-ios'
            Plug 'nacitar/a.vim'
        endif


    " ai
        if count(g:spf13_bundle_groups, 'ai')
            " Plug 'github/copilot.vim'
        endif

    " bash
        if count(g:spf13_bundle_groups, 'bash')

            if !has('win32') && has('unix')
                " for man page
                " Plug 'jez/vim-superman'
            endif

        endif


    " haskell
        if count(g:spf13_bundle_groups, 'haskell')
            Plug 'neovimhaskell/haskell-vim'
        endif


    endif

    call plug#end()
" }

" General {
    set autowrite                  " automatically write a file when leaving a modified buffer
    set shortmess+=filmnrxoOtT      " abbrev. of messages (avoids 'hit enter')
" }

